generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CLIENT
}

enum EventStatus {
  OPEN
  ONGOING
  CANCELLED
  DONE
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  email      String   @unique
  birthday   DateTime
  password   String
  role       Role     @default(CLIENT)
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(64)
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime    @map("start_date")
  endDate     DateTime    @map("end_date")
  venue       String
  country     String
  city        String
  status      EventStatus @default(OPEN)
  maxCapacity Int         @map("max_capacity")
  price       Decimal     @db.Decimal(10, 2)
  isDeleted   Boolean     @default(false) @map("is_deleted")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("events")
}

model Reservation {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  eventId     Int      @map("event_id")
  price       Decimal  @db.Decimal(10, 2)
  isCancelled Boolean  @default(false) @map("is_cancelled")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("reservations")
} 

model Review {
  id         Int      @id @default(autoincrement())
  reviewText String   @map("review_text")
  rating     Int
  eventId    Int      @map("event_id")
  userId     Int      @map("user_id")
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")


  @@map("reviews")
}